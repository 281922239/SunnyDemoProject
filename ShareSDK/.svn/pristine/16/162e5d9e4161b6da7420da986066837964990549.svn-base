package com.het.share.utils;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.Environment;
import android.support.annotation.Nullable;

import com.facebook.common.executors.CallerThreadExecutor;
import com.facebook.common.references.CloseableReference;
import com.facebook.datasource.DataSource;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.core.ImagePipeline;
import com.facebook.imagepipeline.datasource.BaseBitmapDataSubscriber;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequestBuilder;
import com.het.share.listener.ILoadNetImage;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * Created by sunny on 2016/1/12.
 * Annotion:
 */
public class ShareSDKUtils {

    private static ShareSDKUtils mInstance;
    private Context mContext;

    public ShareSDKUtils(Context context) {
        this.mContext = context;
    }

    public static ShareSDKUtils getInstance(Context context){

        if(mInstance == null){
            mInstance = new ShareSDKUtils(context);
        }

        return mInstance;
    }

    /**
     * 把图片转成二进制数组
     *
     * @param bmp
     * @param needRecycle
     * @return
     */
    public static byte[] bmpToByteArray(final Bitmap bmp, final boolean needRecycle) {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        bmp.compress(Bitmap.CompressFormat.PNG, 100, output);
        if (needRecycle) {
            bmp.recycle();
        }

        byte[] result = output.toByteArray();
        try {
            output.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return result;
    }

    /**
     * 把bm存储到本地，返回路径
     * @param path  存储路径
     * @param bitmap
     * @return
     */

    public static String savePhoto(String path, Bitmap bitmap) {
        if (!isSdcardExist()) {
            return null;
        }
        FileOutputStream fileOutputStream = null;
        createDirFile(path);

        String fileName = "share_local.jpg";
        String newFilePath = path + File.separator+fileName;
        File file = createNewFile(newFilePath);
        if (file == null) {
            return null;
        }
        try {
            fileOutputStream = new FileOutputStream(newFilePath);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
        } catch (FileNotFoundException e1) {
            return null;
        } finally {
            try {
                if (fileOutputStream != null) {
                    fileOutputStream.flush();
                    fileOutputStream.close();
                }
            } catch (IOException e) {
                return null;
            }
        }
        return newFilePath;
    }

    /**
     * 创建根目录
     *
     * @param path 目录路径
     */
    public static void createDirFile(String path) {
        File dir = new File(path);
        if (!dir.exists()) {
            dir.mkdirs();
        }
    }

    /**
     * 创建文件
     *
     * @param path 文件路径
     * @return 创建的文件
     */
    public static File createNewFile(String path) {
        File file = new File(path);
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException e) {
                return null;
            }
        }
        return file;
    }

    /**
     * 判断SD是否可以
     */
    public static boolean isSdcardExist() {
        if (Environment.getExternalStorageState().equals(
                Environment.MEDIA_MOUNTED)) {
            return true;
        }
        return false;
    }


    /**
     * 获取网络图片，
     * @param imgUrl
     * @param iLoadNetImage 加载图片成功，失败接口
     */
    public void getNetBitmap(String imgUrl, final ILoadNetImage iLoadNetImage){
        //用Fresco获取bitmap
        ImageRequest imageRequest = ImageRequestBuilder.newBuilderWithSource(Uri.parse(imgUrl))
                .setProgressiveRenderingEnabled(true).build();
        ImagePipeline imagePipeline = Fresco.getImagePipeline();
        DataSource<CloseableReference<CloseableImage>> dataSource =
                imagePipeline.fetchDecodedImage(imageRequest, mContext);
        dataSource.subscribe(new BaseBitmapDataSubscriber() {
            @Override
            protected void onNewResultImpl(@Nullable Bitmap bitmap) {
                if (bitmap != null) {
                    //要对图片进行压缩，压缩到32kb以下
                    //采用缩放法压缩
                    int size = 32;
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 85, out);
                    float zoom = (float)Math.sqrt(size * 1024 / (float)out.toByteArray().length);

                    Matrix matrix = new Matrix();
                    matrix.setScale(zoom, zoom);

                    Bitmap result = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);

                    out.reset();
                    result.compress(Bitmap.CompressFormat.JPEG, 85, out);
                    while(out.toByteArray().length > size * 1024){
                        System.out.println(out.toByteArray().length);
                        matrix.setScale(0.9f, 0.9f);
                        result = Bitmap.createBitmap(result, 0, 0, result.getWidth(), result.getHeight(), matrix, true);
                        out.reset();
                        result.compress(Bitmap.CompressFormat.JPEG, 85, out);
                    }

                    bitmap.recycle();
                    iLoadNetImage.loadImageSuccess(result,null);
                }
            }

            @Override
            protected void onFailureImpl(DataSource<CloseableReference<CloseableImage>> dataSource) {

                iLoadNetImage.loadImageFailure();
            }
        }, CallerThreadExecutor.getInstance());
    }
}
